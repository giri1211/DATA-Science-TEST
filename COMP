SQL CODE:

CREATE TABLE Customers (
    CustomerID INT AUTO_INCREMENT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100),
    Phone VARCHAR(20),
    RegistrationDate DATE
);

CREATE TABLE Products (
    ProductID INT AUTO_INCREMENT PRIMARY KEY,
    ProductName VARCHAR(100),
    Category VARCHAR(50),
    Price DECIMAL(10, 2)
);

CREATE TABLE SalesRep (
    SalesRepID INT AUTO_INCREMENT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Region VARCHAR(50)
);

CREATE TABLE Sales (
    SaleID INT AUTO_INCREMENT PRIMARY KEY,
    SaleDate DATE,
    CustomerID INT,
    ProductID INT,
    SalesRepID INT,
    Quantity INT,
    TotalAmount DECIMAL(10, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
    FOREIGN KEY (SalesRepID) REFERENCES SalesRep(SalesRepID)
);
INSERT INTO Customers (FirstName, LastName, Email, Phone, RegistrationDate) VALUES
('John', 'Doe', 'john.doe@example.com', '123-456-7890', '2022-01-01'),
('Jane', 'Smith', 'jane.smith@example.com', '123-456-7891', '2022-02-01').
;

INSERT INTO Products (ProductName, Category, Price) VALUES
('Widget A', 'Gadgets', 19.99),
('Widget B', 'Gadgets', 29.99).
;

INSERT INTO SalesRep (FirstName, LastName, Region) VALUES
('Alice', 'Johnson', 'North'),
('Bob', 'Williams', 'South').
;

INSERT INTO Sales (SaleDate, CustomerID, ProductID, SalesRepID, Quantity, TotalAmount) VALUES
('2024-08-01', 1, 1, 1, 5, 99.95),
('2024-08-02', 2, 2, 2, 3, 89.97).
;

DATA ANALYSIS(Python,Numpy,Pandas)

pip install pandas numpy sqlalchemy matplotlib
pip install scikit-learn




import pandas as pd
import numpy as np
from sqlalchemy import create_engine


engine = create_engine('mysql+pymysql://username:password@host/database')


sales_df = pd.read_sql('SELECT * FROM Sales', engine)
products_df = pd.read_sql('SELECT * FROM Products', engine)
customers_df = pd.read_sql('SELECT * FROM Customers', engine)
salesrep_df = pd.read_sql('SELECT * FROM SalesRep', engine)


data_df = sales_df.merge(products_df, on='ProductID')\
                  .merge(customers_df, on='CustomerID')\
                  .merge(salesrep_df, on='SalesRepID')


print(data_df.describe())
print(data_df.corr())


total_sales = data_df['TotalAmount'].sum()
avg_order_value = data_df['TotalAmount'].mean()
sales_by_region = data_df.groupby('Region')['TotalAmount'].sum()

print(f"Total Sales: ${total_sales}")
print(f"Average Order Value: ${avg_order_value}")
print(f"Sales by Region:\n{sales_by_region}")

STATISTICAL MODELLING

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt


sales_df = pd.read_csv('sales_data.csv')  # Assuming data is saved to CSV
sales_df['SaleDate'] = pd.to_datetime(sales_df['SaleDate'])
sales_df['Month'] = sales_df['SaleDate'].dt.to_period('M').astype(str)

monthly_sales = sales_df.groupby('Month')['TotalAmount'].sum().reset_index()


monthly_sales['Month'] = pd.to_datetime(monthly_sales['Month'])
monthly_sales['Month'] = monthly_sales['Month'].map(lambda x: x.toordinal())

X = monthly_sales[['Month']]
y = monthly_sales['TotalAmount']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)


model = LinearRegression()
model.fit(X_train, y_train)


y_pred = model.predict(X_test)


mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")


plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color='black', label='Actual data')
plt.plot(X_test, y_pred, color='blue', linewidth=3, label='Fitted line')
plt.xlabel('Month')
plt.ylabel('Total Amount')
plt.title('Sales Forecasting')
plt.legend()
plt.show()

GIT HUB REPOSITORY

mkdir sales_analysis
cd sales_analysis
git init

*.pyc
*.pyo
__pycache__/
.vscode/

git add .
git commit -m "Initial commit of sales analysis project"

git remote add origin https://github.com/username/sales_analysis.git
git push -u origin master

git checkout -b data-analysis

git checkout master
git merge data-analysis


