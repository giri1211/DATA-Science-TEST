CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100) UNIQUE,
    Phone VARCHAR(15),
    Address TEXT,
    JoinDate DATE
);
CREATE TABLE Products (
    ProductID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100),
    Description TEXT,
    Price DECIMAL(10, 2),
    StockQuantity INT,
    CategoryID INT,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);
CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY AUTO_INCREMENT,
    CategoryName VARCHAR(50) UNIQUE
);
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    OrderDate DATE,
    Status VARCHAR(20),
    TotalAmount DECIMAL(10, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY AUTO_INCREMENT,
    OrderID INT,
    ProductID INT,
    Quantity INT,
    UnitPrice DECIMAL(10, 2),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY AUTO_INCREMENT,
    ProductID INT,
    CustomerID INT,
    Rating INT CHECK (Rating BETWEEN 1 AND 5),
    ReviewText TEXT,
    ReviewDate DATE,
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
INSERT INTO Customers (FirstName, LastName, Email, Phone, Address, JoinDate)
VALUES
('John', 'Doe', 'john.doe@example.com', '555-1234', '123 Elm St', '2023-01-15'),
('Jane', 'Smith', 'jane.smith@example.com', '555-5678', '456 Oak St', '2023-02-20').

INSERT INTO Categories (CategoryName)
VALUES
('Electronics'),
('Books'),
('Clothing'),
('Home & Kitchen').

INSERT INTO Products (Name, Description, Price, StockQuantity, CategoryID)
VALUES
('Smartphone', 'Latest model smartphone with high resolution camera.', 699.99, 150, 1),
('Cooking Pot', 'Durable non-stick cooking pot.', 29.99, 200, 4).

INSERT INTO Orders (CustomerID, OrderDate, Status, TotalAmount)
VALUES
(1, '2024-01-05', 'Shipped', 749.98),
(2, '2024-02-10', 'Delivered', 59.98).

INSERT INTO OrderDetails (OrderID, ProductID, Quantity, UnitPrice)
VALUES
(1, 1, 1, 699.99),
(1, 2, 2, 29.99).


INSERT INTO Reviews (ProductID, CustomerID, Rating, ReviewText, ReviewDate)
VALUES
(1, 1, 5, 'Excellent smartphone with great features!', '2024-01-10'),
(2, 2, 4, 'Good pot but took a while to ship.', '2024-02-15').


SELECT c.CustomerID, CONCAT(c.FirstName, ' ', c.LastName) AS CustomerName, SUM(od.Quantity * od.UnitPrice) AS TotalSpent
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN OrderDetails od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID
ORDER BY TotalSpent DESC
LIMIT 10;



CREATE VIEW MonthlySales AS
SELECT 
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month,
    SUM(od.Quantity * od.UnitPrice) AS TotalSales,
    AVG(od.Quantity * od.UnitPrice) AS AvgSales
FROM Orders o
JOIN OrderDetails od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY Month;


DELIMITER //
CREATE PROCEDURE UpdateProductPrices(IN percentageIncrease DECIMAL(5,2))
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE pID INT;
    DECLARE oldPrice DECIMAL(10,2);
    DECLARE newPrice DECIMAL(10,2);
    DECLARE cur CURSOR FOR SELECT ProductID, Price FROM Products;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    OPEN cur;
    
    read_loop: LOOP
        FETCH cur INTO pID, oldPrice;
        IF done THEN
            LEAVE read_loop;
        END IF;
        
        SET newPrice = oldPrice * (1 + percentageIncrease / 100);
        UPDATE Products SET Price = newPrice WHERE ProductID = pID;
        INSERT INTO PriceChanges (ProductID, OldPrice, NewPrice, ChangeDate) VALUES (pID, oldPrice, newPrice, CURDATE());
    END LOOP;
    
    CLOSE cur;
END //

DELIMITER ;


SELECT p.ProductID, p.Name, p.StockQuantity, AVG(r.Rating) AS AvgRating
FROM Products p
JOIN Reviews r ON p.ProductID = r.ProductID
WHERE p.StockQuantity < 10
GROUP BY p.ProductID
HAVING AVG(r.Rating) >= 4;

Optimization Strategies
Indexes:

Customers Table: Index on Email for faster lookups.
Orders Table: Index on CustomerID for efficient joins with the Customers table.
Products Table: Index on CategoryID for efficient queries related to categories.
OrderDetails Table: Composite index on OrderID and ProductID to speed up joins and aggregate functions.
Reviews Table: Index on ProductID for quick retrieval of reviews related to products.





